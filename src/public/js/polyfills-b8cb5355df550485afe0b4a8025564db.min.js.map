{"version":3,"sources":["webpack:///./node_modules/polyfill-library/polyfills/__dist/_ESAbstract.CreateMethodProperty/raw.js","webpack:///./node_modules/polyfill-library/polyfills/__dist/_ESAbstract.RequireObjectCoercible/raw.js","webpack:///./node_modules/polyfill-library/polyfills/__dist/_ESAbstract.ToString/raw.js","webpack:///./node_modules/polyfill-library/polyfills/__dist/_ESAbstract.IsRegExp/raw.js","webpack:///./node_modules/polyfill-library/polyfills/__dist/_ESAbstract.ToInteger/raw.js","webpack:///./node_modules/polyfill-library/polyfills/__dist/_ESAbstract.ToPrimitive/raw.js","webpack:///./node_modules/polyfill-library/polyfills/__dist/_ESAbstract.Type/raw.js","webpack:///./node_modules/polyfill-library/polyfills/__dist/_ESAbstract.Call/raw.js","webpack:///./node_modules/polyfill-library/polyfills/__dist/_ESAbstract.GetMethod/raw.js","webpack:///./node_modules/polyfill-library/polyfills/__dist/_ESAbstract.OrdinaryToPrimitive/raw.js","webpack:///./node_modules/polyfill-library/polyfills/__dist/_ESAbstract.GetV/raw.js","webpack:///./node_modules/polyfill-library/polyfills/__dist/_ESAbstract.IsCallable/raw.js","webpack:///./node_modules/polyfill-library/polyfills/__dist/_ESAbstract.ToObject/raw.js","webpack:///./node_modules/polyfill-library/polyfills/__dist/_ESAbstract.ToBoolean/raw.js","webpack:///./node_modules/polyfill-library/polyfills/__dist/_ESAbstract.Get/raw.js","webpack:///./node_modules/polyfill-library/polyfills/__dist/String.prototype.includes/raw.js"],"names":["CreateMethodProperty","O","P","V","newDesc","value","writable","enumerable","configurable","Object","defineProperty","RequireObjectCoercible","argument","undefined","TypeError","ToString","Type","ToPrimitive","String","IsRegExp","matcher","this","Symbol","Get","match","ToBoolean","lastIndex","RegExp","prototype","exec","call","e","ToInteger","number","Number","isNaN","Infinity","Math","floor","abs","input","PreferredType","arguments","length","hint","exoticToPrim","toPrimitive","GetMethod","result","Call","OrdinaryToPrimitive","x","F","argumentsList","IsCallable","toString","apply","func","GetV","methodNames","i","method","v","p","ToObject","Boolean","searchString","position","S","searchStr","pos","len","start","min","max","indexOf"],"mappings":"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","file":"polyfills-b8cb5355df550485afe0b4a8025564db.min.js","sourcesContent":["\n// _ESAbstract.CreateMethodProperty\n// 7.3.5. CreateMethodProperty ( O, P, V )\nfunction CreateMethodProperty(O, P, V) { // eslint-disable-line no-unused-vars\n\t// 1. Assert: Type(O) is Object.\n\t// 2. Assert: IsPropertyKey(P) is true.\n\t// 3. Let newDesc be the PropertyDescriptor{[[Value]]: V, [[Writable]]: true, [[Enumerable]]: false, [[Configurable]]: true}.\n\tvar newDesc = {\n\t\tvalue: V,\n\t\twritable: true,\n\t\tenumerable: false,\n\t\tconfigurable: true\n\t};\n\t// 4. Return ? O.[[DefineOwnProperty]](P, newDesc).\n\tObject.defineProperty(O, P, newDesc);\n}","\n// _ESAbstract.RequireObjectCoercible\n// 7.2.1. RequireObjectCoercible ( argument )\n// The abstract operation ToObject converts argument to a value of type Object according to Table 12:\n// Table 12: ToObject Conversions\n/*\n|----------------------------------------------------------------------------------------------------------------------------------------------------|\n| Argument Type | Result                                                                                                                             |\n|----------------------------------------------------------------------------------------------------------------------------------------------------|\n| Undefined     | Throw a TypeError exception.                                                                                                       |\n| Null          | Throw a TypeError exception.                                                                                                       |\n| Boolean       | Return argument.                                                                                                                   |\n| Number        | Return argument.                                                                                                                   |\n| String        | Return argument.                                                                                                                   |\n| Symbol        | Return argument.                                                                                                                   |\n| Object        | Return argument.                                                                                                                   |\n|----------------------------------------------------------------------------------------------------------------------------------------------------|\n*/\nfunction RequireObjectCoercible(argument) { // eslint-disable-line no-unused-vars\n\tif (argument === null || argument === undefined) {\n\t\tthrow TypeError();\n\t}\n  return argument;\n}","\n// _ESAbstract.ToString\n/* global Type, ToPrimitive */\n// 7.1.12. ToString ( argument )\n// The abstract operation ToString converts argument to a value of type String according to Table 11:\n// Table 11: ToString Conversions\n/*\n|---------------|--------------------------------------------------------|\n| Argument Type | Result                                                 |\n|---------------|--------------------------------------------------------|\n| Undefined     | Return \"undefined\".                                    |\n|---------------|--------------------------------------------------------|\n| Null\t        | Return \"null\".                                         |\n|---------------|--------------------------------------------------------|\n| Boolean       | If argument is true, return \"true\".                    |\n|               | If argument is false, return \"false\".                  |\n|---------------|--------------------------------------------------------|\n| Number        | Return NumberToString(argument).                       |\n|---------------|--------------------------------------------------------|\n| String        | Return argument.                                       |\n|---------------|--------------------------------------------------------|\n| Symbol        | Throw a TypeError exception.                           |\n|---------------|--------------------------------------------------------|\n| Object        | Apply the following steps:                             |\n|               | Let primValue be ? ToPrimitive(argument, hint String). |\n|               | Return ? ToString(primValue).                          |\n|---------------|--------------------------------------------------------|\n*/\nfunction ToString(argument) { // eslint-disable-line no-unused-vars\n\tswitch(Type(argument)) {\n\t\tcase 'symbol':\n\t\t\tthrow new TypeError('Cannot convert a Symbol value to a string');\n\t\t\tbreak;\n\t\tcase 'object':\n\t\t\tvar primValue = ToPrimitive(argument, 'string');\n\t\t\treturn ToString(primValue);\n\t\tdefault:\n\t\t\treturn String(argument);\n\t}\n}","\n// _ESAbstract.IsRegExp\n/* global Type, Get, ToBoolean */\n// 7.2.8. IsRegExp ( argument )\nfunction IsRegExp(argument) { // eslint-disable-line no-unused-vars\n\t// 1. If Type(argument) is not Object, return false.\n\tif (Type(argument) !== 'object') {\n\t\treturn false;\n\t}\n\t// 2. Let matcher be ? Get(argument, @@match).\n\tvar matcher = 'Symbol' in this && 'match' in this.Symbol ? Get(argument, this.Symbol.match) : undefined;\n\t// 3. If matcher is not undefined, return ToBoolean(matcher).\n\tif (matcher !== undefined) {\n\t\treturn ToBoolean(matcher);\n\t}\n\t// 4. If argument has a [[RegExpMatcher]] internal slot, return true.\n\ttry {\n\t\tvar lastIndex = argument.lastIndex;\n\t\targument.lastIndex = 0;\n\t\tRegExp.prototype.exec.call(argument);\n\t\treturn true;\n\t} catch (e) {} finally {\n\t\targument.lastIndex = lastIndex;\n\t}\n\t// 5. Return false.\n\treturn false;\n}","\n// _ESAbstract.ToInteger\n// 7.1.4. ToInteger ( argument )\nfunction ToInteger(argument) { // eslint-disable-line no-unused-vars\n\t// 1. Let number be ? ToNumber(argument).\n\tvar number = Number(argument);\n\t// 2. If number is NaN, return +0.\n\tif (isNaN(number)) {\n\t\treturn 0;\n\t}\n\t// 3. If number is +0, -0, +∞, or -∞, return number.\n\tif (number === 0 || number === -0 || number === Infinity || number === -Infinity) {\n\t\treturn number;\n\t}\n\t// 4. Return the number value that is the same sign as number and whose magnitude is floor(abs(number)).\n\treturn ((number < 0) ? -1 : 1) * Math.floor(Math.abs(number));\n}","\n// _ESAbstract.ToPrimitive\n/* global Type, GetMethod, Symbol, Call, OrdinaryToPrimitive */\n// 7.1.1. ToPrimitive ( input [ , PreferredType ] )\nfunction ToPrimitive(input /* [, PreferredType] */) { // eslint-disable-line no-unused-vars\n\tvar PreferredType = arguments.length > 1 ? arguments[1] : undefined;\n\t// 1. Assert: input is an ECMAScript language value.\n\t// 2. If Type(input) is Object, then\n\tif (Type(input) === 'object') {\n\t\t// a. If PreferredType is not present, let hint be \"default\".\n\t\tif (arguments.length < 2) {\n\t\t\tvar hint = 'default';\n\t\t\t// b. Else if PreferredType is hint String, let hint be \"string\".\n\t\t} else if (PreferredType === String) {\n\t\t\thint = 'string';\n\t\t\t// c. Else PreferredType is hint Number, let hint be \"number\".\n\t\t} else if (PreferredType === Number) {\n\t\t\thint = 'number';\n\t\t}\n\t\t// d. Let exoticToPrim be ? GetMethod(input, @@toPrimitive).\n\t\tvar exoticToPrim = typeof this.Symbol === 'function' && typeof this.Symbol.toPrimitive === 'symbol' ? GetMethod(input, this.Symbol.toPrimitive) : undefined;\n\t\t// e. If exoticToPrim is not undefined, then\n\t\tif (exoticToPrim !== undefined) {\n\t\t\t// i. Let result be ? Call(exoticToPrim, input, « hint »).\n\t\t\tvar result = Call(exoticToPrim, input, [hint]);\n\t\t\t// ii. If Type(result) is not Object, return result.\n\t\t\tif (Type(result) !== 'object') {\n\t\t\t\treturn result;\n\t\t\t}\n\t\t\t// iii. Throw a TypeError exception.\n\t\t\tthrow new TypeError('Cannot convert exotic object to primitive.');\n\t\t}\n\t\t// f. If hint is \"default\", set hint to \"number\".\n\t\tif (hint === 'default') {\n\t\t\thint = 'number';\n\t\t}\n\t\t// g. Return ? OrdinaryToPrimitive(input, hint).\n\t\treturn OrdinaryToPrimitive(input, hint);\n\t}\n\t// 3. Return input\n\treturn input;\n}","\n// _ESAbstract.Type\n// \"Type(x)\" is used as shorthand for \"the type of x\"...\nfunction Type(x) { // eslint-disable-line no-unused-vars\n\tswitch (typeof x) {\n\t\tcase 'undefined':\n\t\t\treturn 'undefined';\n\t\tcase 'boolean':\n\t\t\treturn 'boolean';\n\t\tcase 'number':\n\t\t\treturn 'number';\n\t\tcase 'string':\n\t\t\treturn 'string';\n\t\tcase 'symbol':\n\t\t\treturn 'symbol';\n\t\tdefault:\n\t\t\t// typeof null is 'object'\n\t\t\tif (x === null) return 'null';\n\t\t\t// Polyfill.io - This is here because a Symbol polyfill will have a typeof `object`.\n\t\t\tif ('Symbol' in this && x instanceof this.Symbol) return 'symbol';\n\t\t\treturn 'object';\n\t}\n}","\n// _ESAbstract.Call\n/* global IsCallable */\n// 7.3.12. Call ( F, V [ , argumentsList ] )\nfunction Call(F, V /* [, argumentsList] */) { // eslint-disable-line no-unused-vars\n\t// 1. If argumentsList is not present, set argumentsList to a new empty List.\n\tvar argumentsList = arguments.length > 2 ? arguments[2] : [];\n\t// 2. If IsCallable(F) is false, throw a TypeError exception.\n\tif (IsCallable(F) === false) {\n\t\tthrow new TypeError(Object.prototype.toString.call(F) + 'is not a function.');\n\t}\n\t// 3. Return ? F.[[Call]](V, argumentsList).\n\treturn F.apply(V, argumentsList);\n}","\n// _ESAbstract.GetMethod\n/* global GetV, IsCallable */\n// 7.3.9. GetMethod ( V, P )\nfunction GetMethod(V, P) { // eslint-disable-line no-unused-vars\n\t// 1. Assert: IsPropertyKey(P) is true.\n\t// 2. Let func be ? GetV(V, P).\n\tvar func = GetV(V, P);\n\t// 3. If func is either undefined or null, return undefined.\n\tif (func === null || func === undefined) {\n\t\treturn undefined;\n\t}\n\t// 4. If IsCallable(func) is false, throw a TypeError exception.\n\tif (IsCallable(func) === false) {\n\t\tthrow new TypeError('Method not callable: ' + P);\n\t}\n\t// 5. Return func.\n\treturn func;\n}","\n// _ESAbstract.OrdinaryToPrimitive\n/* global Get, IsCallable, Call, Type */\n// 7.1.1.1. OrdinaryToPrimitive ( O, hint )\nfunction OrdinaryToPrimitive(O, hint) { // eslint-disable-line no-unused-vars\n\t// 1. Assert: Type(O) is Object.\n\t// 2. Assert: Type(hint) is String and its value is either \"string\" or \"number\".\n\t// 3. If hint is \"string\", then\n\tif (hint === 'string') {\n\t\t// a. Let methodNames be « \"toString\", \"valueOf\" ».\n\t\tvar methodNames = ['toString', 'valueOf'];\n\t\t// 4. Else,\n\t} else {\n\t\t// a. Let methodNames be « \"valueOf\", \"toString\" ».\n\t\tmethodNames = ['valueOf', 'toString'];\n\t}\n\t// 5. For each name in methodNames in List order, do\n\tfor (var i = 0; i < methodNames.length; ++i) {\n\t\tvar name = methodNames[i];\n\t\t// a. Let method be ? Get(O, name).\n\t\tvar method = Get(O, name);\n\t\t// b. If IsCallable(method) is true, then\n\t\tif (IsCallable(method)) {\n\t\t\t// i. Let result be ? Call(method, O).\n\t\t\tvar result = Call(method, O);\n\t\t\t// ii. If Type(result) is not Object, return result.\n\t\t\tif (Type(result) !== 'object') {\n\t\t\t\treturn result;\n\t\t\t}\n\t\t}\n\t}\n\t// 6. Throw a TypeError exception.\n\tthrow new TypeError('Cannot convert to primitive.');\n}","\n// _ESAbstract.GetV\n/* global ToObject */\n// 7.3.2 GetV (V, P)\nfunction GetV(v, p) { // eslint-disable-line no-unused-vars\n\t// 1. Assert: IsPropertyKey(P) is true.\n\t// 2. Let O be ? ToObject(V).\n\tvar o = ToObject(v);\n\t// 3. Return ? O.[[Get]](P, V).\n\treturn o[p];\n}","\n// _ESAbstract.IsCallable\n// 7.2.3. IsCallable ( argument )\nfunction IsCallable(argument) { // eslint-disable-line no-unused-vars\n\t// 1. If Type(argument) is not Object, return false.\n\t// 2. If argument has a [[Call]] internal method, return true.\n\t// 3. Return false.\n\n\t// Polyfill.io - Only function objects have a [[Call]] internal method. This means we can simplify this function to check that the argument has a type of function.\n\treturn typeof argument === 'function';\n};","\n// _ESAbstract.ToObject\n// 7.1.13 ToObject ( argument )\n// The abstract operation ToObject converts argument to a value of type Object according to Table 12:\n// Table 12: ToObject Conversions\n/*\n|----------------------------------------------------------------------------------------------------------------------------------------------------|\n| Argument Type | Result                                                                                                                             |\n|----------------------------------------------------------------------------------------------------------------------------------------------------|\n| Undefined     | Throw a TypeError exception.                                                                                                       |\n| Null          | Throw a TypeError exception.                                                                                                       |\n| Boolean       | Return a new Boolean object whose [[BooleanData]] internal slot is set to argument. See 19.3 for a description of Boolean objects. |\n| Number        | Return a new Number object whose [[NumberData]] internal slot is set to argument. See 20.1 for a description of Number objects.    |\n| String        | Return a new String object whose [[StringData]] internal slot is set to argument. See 21.1 for a description of String objects.    |\n| Symbol        | Return a new Symbol object whose [[SymbolData]] internal slot is set to argument. See 19.4 for a description of Symbol objects.    |\n| Object        | Return argument.                                                                                                                   |\n|----------------------------------------------------------------------------------------------------------------------------------------------------|\n*/\nfunction ToObject(argument) { // eslint-disable-line no-unused-vars\n\tif (argument === null || argument === undefined) {\n\t\tthrow TypeError();\n\t}\n  return Object(argument);\n}","\n// _ESAbstract.ToBoolean\n// 7.1.2. ToBoolean ( argument )\n// The abstract operation ToBoolean converts argument to a value of type Boolean according to Table 9:\n/*\n--------------------------------------------------------------------------------------------------------------\n| Argument Type | Result                                                                                     |\n--------------------------------------------------------------------------------------------------------------\n| Undefined     | Return false.                                                                              |\n| Null          | Return false.                                                                              |\n| Boolean       | Return argument.                                                                           |\n| Number        | If argument is +0, -0, or NaN, return false; otherwise return true.                        |\n| String        | If argument is the empty String (its length is zero), return false; otherwise return true. |\n| Symbol        | Return true.                                                                               |\n| Object        | Return true.                                                                               |\n--------------------------------------------------------------------------------------------------------------\n*/\nfunction ToBoolean(argument) { // eslint-disable-line no-unused-vars\n\treturn Boolean(argument);\n}","\n// _ESAbstract.Get\n// 7.3.1. Get ( O, P )\nfunction Get(O, P) { // eslint-disable-line no-unused-vars\n\t// 1. Assert: Type(O) is Object.\n\t// 2. Assert: IsPropertyKey(P) is true.\n\t// 3. Return ? O.[[Get]](P, O).\n\treturn O[P];\n}","\n// String.prototype.includes\n// 21.1.3.7. String.prototype.includes ( searchString [ , position ] )\nCreateMethodProperty(String.prototype, 'includes', function includes(searchString /* [ , position ] */) {\n\t'use strict';\n\tvar position = arguments.length > 1 ? arguments[1] : undefined;\n\t// 1. Let O be ? RequireObjectCoercible(this value).\n\tvar O = RequireObjectCoercible(this);\n\t// 2. Let S be ? ToString(O).\n\tvar S = ToString(O);\n\t// 3. Let isRegExp be ? IsRegExp(searchString).\n\tvar isRegExp = IsRegExp(searchString);\n\t// 4. If isRegExp is true, throw a TypeError exception.\n\tif (isRegExp) {\n\t\tthrow new TypeError('First argument to String.prototype.includes must not be a regular expression');\n\t}\n\t// 5. Let searchStr be ? ToString(searchString).\n\tvar searchStr = ToString(searchString);\n\t// 6. Let pos be ? ToInteger(position). (If position is undefined, this step produces the value 0.)\n\tvar pos = ToInteger(position);\n\t// 7. Let len be the length of S.\n\tvar len = S.length;\n\t// 8. Let start be min(max(pos, 0), len).\n\tvar start = Math.min(Math.max(pos, 0), len);\n\t// 9. Let searchLen be the length of searchStr.\n\t// var searchLength = searchStr.length;\n\t// 10. If there exists any integer k not smaller than start such that k + searchLen is not greater than len, and for all nonnegative integers j less than searchLen, the code unit at index k+j within S is the same as the code unit at index j within searchStr, return true; but if there is no such integer k, return false.\n\treturn String.prototype.indexOf.call(S, searchStr, start) !== -1;\n});"],"sourceRoot":""}
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/public/js/homepageFunctions.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./src/public/js/homepageFunctions.js":
/*!********************************************!*\
  !*** ./src/public/js/homepageFunctions.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var getCookie = function getCookie(cname) {
    var name = cname + "=";
    var ca = document.cookie.split(';');
    for (var i = 0; i < ca.length; i++) {
        var c = ca[i];
        while (c.charAt(0) === ' ') {
            c = c.substring(1);
        }
        if (c.indexOf(name) === 0) {
            return c.substring(name.length, c.length);
        }
    }
    return "";
};

var isJSON = function isJSON(str) {
    try {
        JSON.parse(str);
    } catch (e) {
        return false;
    }
    return true;
};

var getTime = function getTime(hours, minutes) {
    var time = null;
    minutes = minutes + "";
    if (hours < 12) {
        time = "AM";
    } else {
        time = "PM";
    }
    if (hours === 0) {
        hours = 12;
    }
    if (hours > 12) {
        hours = hours - 12;
    }
    if (minutes.length === 1) {
        minutes = "0" + minutes;
    }
    return hours + ":" + minutes + " " + time;
};

var sliderIntToStartEndTimes = function sliderIntToStartEndTimes(val0, val1) {
    var minutes0 = parseInt(val0, 10) % 60;
    var hours0 = Math.floor(parseInt(val0, 10) / 60) % 24;
    var minutes1 = parseInt(val1, 10) % 60;
    var hours1 = Math.floor(parseInt(val1, 10) / 60) % 24;

    var startTime = getTime(hours0, minutes0);
    var endTime = getTime(hours1, minutes1);
    return startTime + " - " + endTime;
};

var setSpanTime = function setSpanTime($id) {
    var val0 = $id.slider("values", 0);
    var val1 = $id.slider("values", 1);
    $id.parent().children().last().text(sliderIntToStartEndTimes(val0, val1));
};
// Export function globally
window.setSpanTime = setSpanTime;

var slideTime = function slideTime(event, ui) {
    var val0 = ui.values[0];
    var val1 = ui.values[1];
    $(event.target).parent().children().last().text(sliderIntToStartEndTimes(val0, val1));
};
// Export function globally
window.slideTime = slideTime;

$(document).ready(function () {
    var crns = "";
    var crnSelector = $("#crns");
    if (typeof crnSelector.val() !== "undefined" && crnSelector.val().length > 0) {
        crns = crnSelector.val().replace(/[,]+/g, '').replace(/ +(?= )/g, '').split(" ");
    }
    var subjects = {
        "ACCT": "Accounting",
        "AMST": "American Studies",
        "ANTH": "Anthropology",
        "ARAB": "Arabic",
        "ARTH": "Art History",
        "BIOL": "Biology",
        "BMB": "Biochemistry",
        "BUAD": "Business Administration",
        "CHEM": "Chemistry",
        "CHIN": "Chinese Program",
        "CJ": "Criminal Justice",
        "CLAC": "Cultures and Languages Across the Curriculum",
        "CLCV": "Classical Studies",
        "CLSC": "Classical Studies",
        "CMSC": "Computer Science",
        "DANC": "Dance",
        "ECON": "Economics",
        "EDUC": "Education",
        "ENGL": "English",
        "ENVR": "Environmental Studies",
        "FIN": "Finance",
        "FMST": "Film Studies",
        "FREN": "French Program",
        "FYS": "First Year Seminar",
        "GEOG": "Geography",
        "GERM": "German Studies Program",
        "GREK": "Greek",
        "HCS": "Healthcare Studies",
        "HIST": "History",
        "IBUS": "International Business",
        "IDST": "Interdisciplinary Studies",
        "IS": "International Studies",
        "ITAL": "Italian Studies Program",
        "JAPN": "Japanese Program",
        "JOUR": "Journalism",
        "JWST": "Jewish Studies",
        "LAIS": "Latin American, Latino and Iberian Studies",
        "LATN": "Latin",
        "LDST": "Leadership Studies",
        "LLC": "Languages, Literatures and Cultures",
        "MATH": "Mathematics",
        "MGMT": "Management",
        "MKT": "Marketing",
        "MSAP": "Music-Applied",
        "MSCL": "Military Science and Leadership",
        "MSEN": "Music-Ensemble",
        "MUS": "Music",
        "PHIL": "Philosophy",
        "PHYS": "Physics",
        "PLSC": "Political Science",
        "PPEL": "Philosophy Politics Economics and Law",
        "PSYC": "Psychology",
        "RELG": "Religious Studies",
        "RHCS": "Rhetoric and Communication Studies",
        "RUSN": "Russian Studies Program",
        "SDLC": "Languages, Literatures and Cultures",
        "SOC": "Sociology",
        "SPCS": "School of Professional and Continuing Studies",
        "SWAH": "Languages, Literatures and Cultures",
        "THTR": "Theatre",
        "UNIV": "University Seminar",
        "VMAP": "Visual and Media Arts Practice",
        "WELL": "Wellness Program",
        "WGSS": "Women, Gender and Sexuality Studies"
    };

    var $defaultSearchResult = $("#searchResultTemplate");
    var $addedTemplate = $("#addedTemplate");
    var $buttonRemoveTemplate = $("#basket-remove");
    var alreadyFetched = [];

    var browse = function browse() {
        Object.keys(subjects).forEach(function (k) {
            var subjFullName = subjects[k];
            var $subjPanel = $("#subj-list-template").clone().removeClass("hide").removeAttr('id').addClass("subj-" + k);
            $subjPanel.find(".panel-title").text(subjFullName + " (" + k + ")");
            $("#subj-list").append($subjPanel);
        });
    };

    var loadCourses = function loadCourses($newPanel, data, v, num) {
        var initial = data.substring(data.indexOf("</span>" + v.FOS + " " + num));
        var end = initial.substring(0, initial.indexOf('<!--close inner-content-wrap'));
        var title = end.substring(v.FOS.length + 9 + v["Course Number"].length, end.indexOf("</a>"));
        var descr = end.substring(end.indexOf("Description</div>") + 17);
        descr = descr.substring(0, descr.indexOf("</div>"));
        var units = end.substring(end.indexOf("Units: ") + 7, end.indexOf("</div>"));
        var hasDescr = true;
        if (title.indexOf('Print Courses') > -1) {
            hasDescr = false;
            title = v.Title;
            descr = "Course has no description";
            units = "units are unknown";
        }
        var prereq = "";
        if (end.indexOf("Prerequisites</div>") > -1) {
            prereq = end.substring(end.indexOf("Prerequisites</div>") + 19);
            prereq = prereq.substring(0, prereq.indexOf("</div>"));
        }
        if (!(v.Title.indexOf("ST:") > -1) && !(v.Title.indexOf("SP:") > -1) && v.FOS !== "FYS" && v["FOS"] !== "WELL" && !(v.FOS === "HIST" && v["Course Number"] === "199") && !(v.FOS === "HIST" && v["Course Number"] === "299") && !(v.FOS === "ENGL" && v["Course Number"] === "299") && !(v.FOS === "BIOL" && v["Course Number"] === "199")) {
            if (hasDescr) {
                v.Title = title;
            }
        }

        if (v.FOS === "FYS" && "description" in v) {
            title = v.displayTitle;
            descr = v.description;
        } else if (!("description" in v)) {
            title = v.Title;
        }

        var html = "<h4>" + title + "</h4><p>" + descr + "</p><p>Units: " + units + "</p>";
        if (prereq !== "") {
            html = html + "<p>Prerequisites: " + prereq + "</p>";
        }
        $newPanel.find("#title").text(v.FOS + " " + v["Course Number"] + " | " + title);
        $newPanel.find(".panel-body").html(html);
        $newPanel.find("#button").attr("data-fos", v.FOS).attr("data-coursenum", v["Course Number"]).attr("data-coursename", v.Title).attr("data-displayTitle", v.displayTitle);

        var inCRN = false;
        v.crns.forEach(function (v) {
            if (crns.indexOf(v) > -1) {
                inCRN = true;
            }
        });

        if (!v.Available) {
            $newPanel.find("#button").removeClass("btn-success").removeClass("btn-add-course").removeClass("glyphicon-plus").addClass("btn-disable").text("Course Not Available");
        } else if (inCRN) {
            $newPanel.find("#button").removeClass("btn-success").removeClass("btn-add-course").removeClass("glyphicon-plus").addClass("btn-disable").text("Preregistered");
        }

        $("#course-basket, #course-basket-required").find("li").toArray().forEach(function (li) {
            li = $(li);
            if (li.data("fos") === v.FOS && li.data("coursenum") === parseInt(v["Course Number"]) && li.data("coursename") === v.Title) {
                $newPanel.find("#button").removeClass("glyphicon-plus").removeClass("btn-success").removeClass("btn-add-course").addClass("btn-danger").addClass("glyphicon-minus").addClass("btn-remove-course");
            }
        });

        return $newPanel;
    };

    var fetchBySubj = function fetchBySubj(k) {
        $.ajax({
            url: "richmondAPI.php",
            jsonp: "callback",
            dataType: "jsonp",
            data: {
                subj: k
            },
            success: function success(courseData) {
                courseData = courseData.response;
                $.getJSON('richmondAPI.php?catalog-subj=' + k + '&callback=?', function (data) {
                    data = data.courses;
                    courseData.forEach(function (v) {
                        var $newPanel = $("#subj-list-template2").clone().removeAttr('id');
                        var num = v["Course Number"];
                        if (num <= 99) {
                            num = "0" + num;
                        }
                        $newPanel = loadCourses($newPanel, data, v, num).removeClass("hide");
                        $("#subj-list").find(".subj-" + k).find('.main-body').append($newPanel);
                    });
                });
            }
        });
    };

    var addCourse = function addCourse(fos, num, name, displaytitle) {
        var continuing = true;
        $("#course-basket li, #course-basket-required li").toArray().forEach(function (course) {
            course = $(course);
            if (course.data("fos") === fos && course.data("coursenum") === num && course.data("coursename") === name) {
                continuing = false;
            }
        });
        if (!continuing) {
            return;
        }

        var changeClassesToRemove = function changeClassesToRemove(course) {
            course = $(course);
            if (course.data("fos") === fos && course.data("coursenum") === num && course.data("coursename") === name) {
                course.removeClass("glyphicon-plus").removeClass("btn-success").removeClass("btn-add-course").addClass("btn-danger").addClass("glyphicon-minus").addClass("btn-remove-course");
            }
        };

        $("#search-results button").toArray().forEach(changeClassesToRemove);
        $(".panel .panel-default button").toArray().forEach(changeClassesToRemove);

        var $add = $addedTemplate.clone();
        var $button = $buttonRemoveTemplate.clone().removeClass("hide");
        $add.removeClass("hide").attr("id", "").text(fos + " " + num + " | " + name).append("&nbsp; &nbsp; &nbsp; &nbsp;", $button).attr("data-fos", fos).attr("data-coursenum", num).attr("data-coursename", name).attr("data-displayTitle", displaytitle);
        $("#course-basket").append($add);
    };

    var createListeners = function createListeners() {
        $(document).on("click", ".collapse-btn", function (event) {
            event = $(event.target);
            while (!event.attr("class").includes("subj-")) {
                event = event.parent();
            }
            var cls = event.attr("class").split(" ");
            cls = cls[cls.length - 1].split("-")[1];
            if (alreadyFetched.indexOf(cls) === -1) {
                fetchBySubj(cls);
                alreadyFetched.push(cls);
            }
            event.find('.panel-collapse:not(.subj-list-collapse)').collapse('toggle');
        });

        $(document).on("click", ".collapse-btn-subj", function (event) {
            event = $(event.target);
            while (!event.attr("class").includes("collapse-btn-subj")) {
                event = event.parent();
            }
            event.parent().parent().find('.panel-collapse').collapse('toggle');
        });

        $(document).on("keyup", "#searchField", function () {
            var loc = $("#searchField").val();
            var $resultsSelector = $("#search-results");
            if (loc === "") {
                $resultsSelector.empty();
            }
            if (loc.length < 3) {
                return;
            }
            $.ajax({
                url: "richmondAPI.php",
                jsonp: "callback",
                dataType: "jsonp",
                data: {
                    search: loc
                },
                success: function success(courseData) {
                    courseData = courseData.response;
                    courseData.forEach(function (v, i) {
                        var $newPanel = $defaultSearchResult.clone();
                        var num = v["Course Number"];
                        var cn = num;

                        if (num <= 99) {
                            num = "0" + num;
                        }

                        // Transform course number to use in lookup against Richmond API
                        if (num > 99) {
                            cn = cn.substr(0, 1) + "00";
                        }

                        $.getJSON('richmondAPI.php?catalog-subj=' + v.FOS + '&catalog-level=' + cn + '&callback=?', function (data) {
                            data = data.courses;
                            $newPanel = loadCourses($newPanel, data, v, num).removeAttr('id').removeClass("hide");
                            if (i === 0) {
                                $resultsSelector.empty();
                            }
                            $resultsSelector.append($newPanel);
                        });
                    });
                }
            });
        });

        $(document).on("click", ".btn-generate", function () {
            var basketItemsToDictionary = function basketItemsToDictionary(data) {
                return {
                    CourseNum: $(data).data("coursenum"),
                    FOS: $(data).data("fos"),
                    Title: $(data).data("coursename"),
                    displayTitle: $(data).data("displaytitle"),
                    requiredCourse: false
                };
            };

            var getCourses = [];

            var $courses = $("#course-basket").find("li");
            var count = $courses.size();
            getCourses = getCourses.concat($courses.toArray().map(basketItemsToDictionary));

            $courses = $("#course-basket-required").find("li");
            count += $courses.size();
            getCourses = getCourses.concat($courses.toArray().map(basketItemsToDictionary).map(function (v) {
                v.requiredCourse = true;
                return v;
            }));

            var unwantedTimes = $("#block").find(".blocked-time").toArray().map(function (value) {
                return $(value).find("input, .time-display").toArray().reduce(function (accumulator, currentValue) {
                    currentValue = $(currentValue);
                    if (typeof currentValue.text() !== "undefined" && currentValue.text() !== "") {
                        var times = currentValue.text().split(" - ");
                        accumulator.startTime = times[0];
                        accumulator.endTime = times[1];
                    }
                    if (currentValue.is(':checked')) {
                        accumulator[currentValue.attr('name')] = currentValue.attr('name');
                    }

                    return accumulator;
                }, {});
            });

            var crns = $("#crns").val().replace(/\D+/g, ',').split(",");
            getCourses = {
                allCourses: getCourses,
                timePref: $("#time-pref").prop('checked'),
                fullClasses: $("#full-classes").prop('checked'),
                preregistered: crns,
                startTime: $("#restrict-slider").text().split(" - ")[0],
                endTime: $("#restrict-slider").text().split(" - ")[1],
                unwantedTimes: unwantedTimes
            };

            if (count > 5) {
                window.alert("Trying to generate schedules with this many courses may take a long time, but I will try." + "\n\nThe calculation is allowed take up to 5 minutes, if it takes longer, it will fail.");
            }
            window.location.assign("makeSchedule.php?i=" + encodeURIComponent(JSON.stringify(getCourses)));
        });

        $(document).on("click", ".btn-jumbo-close", function () {
            $(".jumbotron").hide();
            document.cookie = "jumbotron=hidden";
        });

        $(document).on("click", ".btn-add-course", function (e) {
            var $course = $(e.target);
            addCourse($course.data("fos"), $course.data("coursenum"), $course.data("coursename"), $course.data("displaytitle"));
        });

        $(document).on("click", ".btn-load-history", function (e) {
            var c = getCookie("history");
            c = JSON.parse(decodeURIComponent(c));
            c = c[$(e.target).data('history-id')];
            $.each(c, function (i, v) {
                if ((typeof v === 'undefined' ? 'undefined' : _typeof(v)) === "object" && "Title" in v) {
                    if ("displayTitle" in v) {
                        v.displayTitle = v.displayTitle.replace(/\+/g, " ");
                    }
                    addCourse(v.FOS, v.CourseNum, v.Title.replace(/\+/g, " "), v.displayTitle);
                }
            });
        });

        $(document).on("click", "#adv", function (e) {
            e.preventDefault(); // Don't scroll to top of page

            if (!$('#advanced').is(':visible')) {
                $('#advanced').show(500);
                $('#adv').text('Hide Advanced Options');
                $('#arrow').removeClass("glyphicon-chevron-right").addClass("glyphicon-chevron-down");
            } else {
                $('#advanced').hide(500);
                $('#adv').text('Show Advanced Options');
                $('#arrow').removeClass("glyphicon-chevron-down").addClass("glyphicon-chevron-right");
            }
        });

        $(document).on("click", ".btn-remove-block-time", function (e) {
            $(e.target).closest(".blocked-time").remove();
        });

        $(document).on("click", ".btn-remove-course", function (e) {
            var $course = $(e.target);
            if (typeof $course.data("fos") === "undefined") {
                $course = $course.parent();
            }
            var fos = $course.data("fos");
            var num = $course.data("coursenum");
            var name = $course.data("coursename");

            var changeClassesToAdd = function changeClassesToAdd(course) {
                course = $(course);
                if (course.data("fos") === fos && course.data("coursenum") === num && course.data("coursename") === name) {
                    course.addClass("glyphicon-plus").addClass("btn-success").addClass("btn-add-course").removeClass("btn-danger").removeClass("glyphicon-minus").removeClass("btn-remove-course");
                }
            };

            $("#search-results").find("button").toArray().forEach(changeClassesToAdd);
            $(".panel .panel-default button").toArray().forEach(changeClassesToAdd);
            $("#course-basket li, #course-basket-required li").toArray().forEach(function (course) {
                course = $(course);
                if (course.data("fos") === fos && course.data("coursenum") === num && course.data("coursename") === name) {
                    course.remove();
                }
            });
        });
    };

    createListeners();

    $("#advanced").hide();

    $('#time-pref').bootstrapToggle({
        on: 'Morning',
        off: 'Afternoon',
        offstyle: 'warning'
    });

    $('#full-classes').bootstrapToggle({
        on: 'Yes',
        off: 'No',
        offstyle: 'danger',
        onstyle: 'success'
    });

    if (getCookie("history").length > 0) {
        var c = getCookie("history");
        c = JSON.parse(decodeURIComponent(c));
        c.forEach(function (v, i) {
            var $cloned = $("#history-template").clone().removeClass("hide").removeAttr('id');
            $cloned.find(".panel-title").text(v.schedules + " Schedules");
            var courses = "<ul class='list-group'>";
            Object.keys(v).forEach(function (key) {
                var v2 = v[key];
                if ((typeof v2 === 'undefined' ? 'undefined' : _typeof(v2)) === "object" && "Title" in v2) {
                    courses = courses + "<li class='list-group-item'>" + v2.Title.replace(/\+/g, " ") + "</li>";
                }
            });
            courses = courses + "</ul>";
            $cloned.find(".panel-body").html(courses);
            $cloned.find(".btn-load-history").attr('data-history-id', i);
            $("#history").prepend($cloned);
        });
    }

    if (getCookie("jumbotron") !== "hidden") {
        $(".jumbotron").removeClass("hide");
    }

    browse();
});

var initialSetSliders = function initialSetSliders(sliderMin, sliderMax) {
    $(document).on("click", "#add-block-time", function () {
        var $cloned = $("#block-time-template").clone().removeClass("hide").removeAttr('id');
        $cloned.find(".time-slider").slider({
            range: true,
            min: sliderMin,
            max: sliderMax,
            step: 15,
            values: [sliderMin, 600],
            slide: slideTime
        });
        setSpanTime($cloned.find(".time-slider"));
        $("#block").append($cloned);
    });

    $(document).ready(function () {
        var getParameterByName = function getParameterByName(name, url) {
            if (!url) {
                url = window.location.href;
            }
            name = name.replace(/[\[\]]/g, "\\$&");
            var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)");
            var results = regex.exec(url);
            if (!results) {
                return null;
            }
            if (!results[2]) {
                return '';
            }
            return decodeURIComponent(results[2].replace(/\+/g, " "));
        };
        var paramI = getParameterByName('i');
        if (paramI !== null && paramI !== "" && isJSON(paramI)) {
            var importFromURL = JSON.parse(paramI).unwantedTimes;

            var setInputCheckedByName = function setInputCheckedByName(name, element) {
                element.find("input[name='" + name + "']").parent().addClass("active");
                element.find("input[name='" + name + "']").prop('checked', true);
            };

            var getTimeInMinutesFromString = function getTimeInMinutesFromString(str) {
                var d = new Date();
                var now = new Date(d.getFullYear(), d.getMonth(), d.getDate(), 0, 0, 0);

                var time = str.split(" ")[0].split(":");
                var ampm = str.split(" ")[1];
                d.setHours(parseInt(time[0]) + (ampm === "PM" ? 12 : 0));
                d.setMinutes(parseInt(time[1]) || 0);
                return Math.floor((d - now) / 60000);
            };

            importFromURL.forEach(function (timeRestrictionValue) {
                var $cloned = $("#block-time-template").clone().removeClass("hide").removeAttr('id');
                timeRestrictionValue.startTime = getTimeInMinutesFromString(timeRestrictionValue.startTime);
                timeRestrictionValue.endTime = getTimeInMinutesFromString(timeRestrictionValue.endTime);

                $cloned.find(".time-slider").slider({
                    range: true,
                    min: sliderMin,
                    max: sliderMax,
                    step: 15,
                    values: [timeRestrictionValue.startTime, timeRestrictionValue.endTime],
                    slide: slideTime
                });
                setSpanTime($cloned.find(".time-slider"));

                var days = ["Su", "M", "T", "W", "R", "F", "S"];
                days.forEach(function (day) {
                    if (day in timeRestrictionValue) {
                        setInputCheckedByName(day, $cloned);
                    }
                });

                $("#block").append($cloned);
            });
        }
    });
};
// Export function globally
window.initialSetSliders = initialSetSliders;

/***/ })

/******/ });
//# sourceMappingURL=homepageFunctions-a8a82b5ffeb0c6a3066c.min.js.map